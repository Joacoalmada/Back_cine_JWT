// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Back.Data.Models;

public partial class CineDBContext : DbContext
{
    public CineDBContext(DbContextOptions<CineDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Asiento> Asientos { get; set; }

    public virtual DbSet<ClasificacionesEdad> ClasificacionesEdads { get; set; }

    public virtual DbSet<Directore> Directores { get; set; }

    public virtual DbSet<Estado> Estados { get; set; }

    public virtual DbSet<Funcione> Funciones { get; set; }

    public virtual DbSet<Genero> Generos { get; set; }

    public virtual DbSet<Idioma> Idiomas { get; set; }

    public virtual DbSet<MetodosPago> MetodosPagos { get; set; }

    public virtual DbSet<Pelicula> Peliculas { get; set; }

    public virtual DbSet<Promocione> Promociones { get; set; }

    public virtual DbSet<Sala> Salas { get; set; }

    public virtual DbSet<Ticket> Tickets { get; set; }

    public virtual DbSet<TiposFuncion> TiposFuncions { get; set; }

    public virtual DbSet<Transaccione> Transacciones { get; set; }

    public virtual DbSet<Usuario> Usuarios { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Asiento>(entity =>
        {
            entity.HasKey(e => e.IdAsiento).HasName("pk_asiento");

            entity.Property(e => e.IdAsiento).HasColumnName("id_asiento");
            entity.Property(e => e.Fila).HasColumnName("fila");
            entity.Property(e => e.IdSala).HasColumnName("id_sala");
            entity.Property(e => e.Numero).HasColumnName("numero");

            entity.HasOne(d => d.IdSalaNavigation).WithMany(p => p.Asientos)
                .HasForeignKey(d => d.IdSala)
                .HasConstraintName("fk_sala_a");
        });

        modelBuilder.Entity<ClasificacionesEdad>(entity =>
        {
            entity.HasKey(e => e.IdClasificacion).HasName("pk_clasificacion_edad");

            entity.ToTable("Clasificaciones_edad");

            entity.Property(e => e.IdClasificacion).HasColumnName("id_clasificacion");
            entity.Property(e => e.Clasificacion)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("clasificacion");
        });

        modelBuilder.Entity<Directore>(entity =>
        {
            entity.HasKey(e => e.IdDirector).HasName("pk_director");

            entity.Property(e => e.IdDirector).HasColumnName("id_director");
            entity.Property(e => e.Apellido)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("apellido");
            entity.Property(e => e.FechaNac)
                .HasColumnType("datetime")
                .HasColumnName("fecha_nac");
            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nombre");
        });

        modelBuilder.Entity<Estado>(entity =>
        {
            entity.HasKey(e => e.IdEstado).HasName("pk_estado");

            entity.Property(e => e.IdEstado).HasColumnName("id_estado");
            entity.Property(e => e.Estado1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("estado");
        });

        modelBuilder.Entity<Funcione>(entity =>
        {
            entity.HasKey(e => e.CodFuncion).HasName("pk_funcion");

            entity.Property(e => e.CodFuncion).HasColumnName("cod_funcion");
            entity.Property(e => e.CodPelicula).HasColumnName("cod_pelicula");
            entity.Property(e => e.CodPromocion).HasColumnName("cod_promocion");
            entity.Property(e => e.Dia).HasColumnName("dia");
            entity.Property(e => e.HoraInicio).HasColumnName("hora_inicio");
            entity.Property(e => e.IdSala).HasColumnName("id_sala");
            entity.Property(e => e.IdTipoFuncion).HasColumnName("id_tipo_funcion");
            entity.Property(e => e.Precio)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("precio");
            entity.Property(e => e.Subtitulo).HasColumnName("subtitulo");

            entity.HasOne(d => d.CodPeliculaNavigation).WithMany(p => p.Funciones)
                .HasForeignKey(d => d.CodPelicula)
                .HasConstraintName("fk_cod_pelicula_f");

            entity.HasOne(d => d.CodPromocionNavigation).WithMany(p => p.Funciones)
                .HasForeignKey(d => d.CodPromocion)
                .HasConstraintName("fk_cod_promocion_f");

            entity.HasOne(d => d.IdSalaNavigation).WithMany(p => p.Funciones)
                .HasForeignKey(d => d.IdSala)
                .HasConstraintName("fk_sala_f");

            entity.HasOne(d => d.IdTipoFuncionNavigation).WithMany(p => p.Funciones)
                .HasForeignKey(d => d.IdTipoFuncion)
                .HasConstraintName("fk_tipo_funcion_f");
        });

        modelBuilder.Entity<Genero>(entity =>
        {
            entity.HasKey(e => e.IdGenero).HasName("pk_genero");

            entity.Property(e => e.IdGenero).HasColumnName("id_genero");
            entity.Property(e => e.Genero1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("genero");
        });

        modelBuilder.Entity<Idioma>(entity =>
        {
            entity.HasKey(e => e.IdIdioma).HasName("pk_idioma");

            entity.Property(e => e.IdIdioma).HasColumnName("id_idioma");
            entity.Property(e => e.Idioma1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("idioma");
        });

        modelBuilder.Entity<MetodosPago>(entity =>
        {
            entity.HasKey(e => e.CodPago).HasName("pk_metodo_pago");

            entity.ToTable("Metodos_pago");

            entity.Property(e => e.CodPago).HasColumnName("cod_pago");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("descripcion");
        });

        modelBuilder.Entity<Pelicula>(entity =>
        {
            entity.HasKey(e => e.CodPelicula).HasName("pk_pelicula");

            entity.Property(e => e.CodPelicula).HasColumnName("cod_pelicula");
            entity.Property(e => e.DuracionMin).HasColumnName("duracion_min");
            entity.Property(e => e.FechaEstreno)
                .HasColumnType("datetime")
                .HasColumnName("fecha_estreno");
            entity.Property(e => e.IdClasificacion).HasColumnName("id_clasificacion");
            entity.Property(e => e.IdDirector).HasColumnName("id_director");
            entity.Property(e => e.IdGenero).HasColumnName("id_genero");
            entity.Property(e => e.IdIdioma).HasColumnName("id_idioma");
            entity.Property(e => e.Portada)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("portada");
            entity.Property(e => e.Titulo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("titulo");

            entity.HasOne(d => d.IdClasificacionNavigation).WithMany(p => p.Peliculas)
                .HasForeignKey(d => d.IdClasificacion)
                .HasConstraintName("fk_clasificacion_p");

            entity.HasOne(d => d.IdDirectorNavigation).WithMany(p => p.Peliculas)
                .HasForeignKey(d => d.IdDirector)
                .HasConstraintName("fk_director_p");

            entity.HasOne(d => d.IdGeneroNavigation).WithMany(p => p.Peliculas)
                .HasForeignKey(d => d.IdGenero)
                .HasConstraintName("fk_genero_p");

            entity.HasOne(d => d.IdIdiomaNavigation).WithMany(p => p.Peliculas)
                .HasForeignKey(d => d.IdIdioma)
                .HasConstraintName("fk_idioma_p");
        });

        modelBuilder.Entity<Promocione>(entity =>
        {
            entity.HasKey(e => e.CodPromocion).HasName("pk_promocion");

            entity.Property(e => e.CodPromocion).HasColumnName("cod_promocion");
            entity.Property(e => e.DescPorcentaje).HasColumnName("desc_porcentaje");
            entity.Property(e => e.Dia).HasColumnName("dia");
            entity.Property(e => e.HoraDesde).HasColumnName("hora_desde");
            entity.Property(e => e.HoraHasta).HasColumnName("hora_hasta");
        });

        modelBuilder.Entity<Sala>(entity =>
        {
            entity.HasKey(e => e.IdSala).HasName("pk_sala");

            entity.Property(e => e.IdSala).HasColumnName("id_sala");
            entity.Property(e => e.Capacidad).HasColumnName("capacidad");
            entity.Property(e => e.NroSala).HasColumnName("nro_sala");
        });

        modelBuilder.Entity<Ticket>(entity =>
        {
            entity.HasKey(e => e.IdTicket).HasName("pk_ticket");

            entity.HasIndex(e => new { e.IdAsiento, e.CodFuncion }, "UQ_Tickets_AsientoFuncion").IsUnique();

            entity.Property(e => e.IdTicket).HasColumnName("id_ticket");
            entity.Property(e => e.CodFuncion).HasColumnName("cod_funcion");
            entity.Property(e => e.CodTransaccion).HasColumnName("cod_transaccion");
            entity.Property(e => e.IdAsiento).HasColumnName("id_asiento");

            entity.HasOne(d => d.CodFuncionNavigation).WithMany(p => p.Tickets)
                .HasForeignKey(d => d.CodFuncion)
                .HasConstraintName("fk_cod_funcion_tk");

            entity.HasOne(d => d.CodTransaccionNavigation).WithMany(p => p.Tickets)
                .HasForeignKey(d => d.CodTransaccion)
                .HasConstraintName("fk_cod_transaccion_tk");

            entity.HasOne(d => d.IdAsientoNavigation).WithMany(p => p.Tickets)
                .HasForeignKey(d => d.IdAsiento)
                .HasConstraintName("fk_asiento_tk");
        });

        modelBuilder.Entity<TiposFuncion>(entity =>
        {
            entity.HasKey(e => e.IdTipoFuncion).HasName("pk_tipo_funcion");

            entity.ToTable("Tipos_funcion");

            entity.Property(e => e.IdTipoFuncion).HasColumnName("id_tipo_funcion");
            entity.Property(e => e.Tipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipo");
        });

        modelBuilder.Entity<Transaccione>(entity =>
        {
            entity.HasKey(e => e.CodTransaccion).HasName("pk_transaccion");

            entity.Property(e => e.CodTransaccion).HasColumnName("cod_transaccion");
            entity.Property(e => e.CantidadTicket).HasColumnName("cantidad_ticket");
            entity.Property(e => e.CodPago).HasColumnName("cod_pago");
            entity.Property(e => e.FechaCompra)
                .HasColumnType("datetime")
                .HasColumnName("fecha_compra");
            entity.Property(e => e.IdEstado).HasColumnName("id_estado");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");

            entity.HasOne(d => d.CodPagoNavigation).WithMany(p => p.Transacciones)
                .HasForeignKey(d => d.CodPago)
                .HasConstraintName("fk_cod_pago_t");

            entity.HasOne(d => d.IdEstadoNavigation).WithMany(p => p.Transacciones)
                .HasForeignKey(d => d.IdEstado)
                .HasConstraintName("fk_estado_t");

            entity.HasOne(d => d.IdUsuarioNavigation).WithMany(p => p.Transacciones)
                .HasForeignKey(d => d.IdUsuario)
                .HasConstraintName("fk_cliente_t");
        });

        modelBuilder.Entity<Usuario>(entity =>
        {
            entity.HasKey(e => e.IdUsuario).HasName("pk_cliente");

            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.Apellido)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("apellido");
            entity.Property(e => e.Contrasena)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("contrasena");
            entity.Property(e => e.Email)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.EsAdmin).HasColumnName("es_admin");
            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nombre");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}